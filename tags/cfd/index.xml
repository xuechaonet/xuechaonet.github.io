<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cfd on Xue Chao</title>
    <link>https://www.xuechao.net/tags/cfd/</link>
    <description>Recent content in cfd on Xue Chao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Mar 2024 18:00:00 +0800</lastBuildDate>
    <atom:link href="https://www.xuechao.net/tags/cfd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CFD and Machine Learning Part 2: A Slightly More Complex Model - Chapter 2. A Single Variable(SK-Learn)</title>
      <link>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-2-english/</link>
      <pubDate>Sat, 30 Mar 2024 18:00:00 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-2-english/</guid>
      <description>Abstract In the previous article, the model used in this study was introduced. In this chapter:
To explore from the most fundamental and simplified perspective, one of the eight variable parameters of the model was selected for study. Different value ranges were defined to study the variable&amp;rsquo;s behavior across various ranges. Sweep calculations were performed to obtain the dataset. The analysis of the dataset is based on a physical understanding of the phenomena described by the model.</description>
    </item>
    <item>
      <title>CFD与机器学习（2）一个稍微复杂一点的模型：2.单变量研究（SK-Learn）</title>
      <link>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-2-chinese/</link>
      <pubDate>Sat, 30 Mar 2024 18:00:00 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-2-chinese/</guid>
      <description>摘要 在前面文章中介绍了本研究的模型，在本章中：
为了从最基础，最简化的角度来进行探索，选取模型8个可变化的参数中的1个作为变量进行研究， 同时为了研究变量在不同的取值范围的表现，约定了不同的取值范围， 使用sweep计算来获得数据集， 希望通过对该模型描述的物理现象出发，对数据集进行基于物理理解的分析， 然后再进行机器学习，使用不同的模型进行拟合， 来评估不同回归模型在不同数据集下的表现。 模型 模型在上篇文章已经做过介绍，如下图所示：
该换热模型的可变参数一共有如下8个：
H &amp;mdash;&amp;mdash;plate的宽， L &amp;mdash;&amp;mdash;plate的长， W &amp;mdash;&amp;mdash;plate的厚， H2 &amp;mdash;&amp;mdash;heat的宽， L2 &amp;mdash;&amp;mdash;heat的长， TH &amp;mdash;&amp;mdash;resist的厚， v_air &amp;mdash;&amp;mdash;空气的进口速度， heat &amp;mdash;&amp;mdash;heat的发热量。 单变量研究 在本章中，我们只选取一个参数作为变量，其他的参数为恒定值。该模型的截面如下图所示：
该模型所反映的物理现象我们上个文章已经介绍：“从heat这个部件发出一定的热量，大部分热量首先经过具有较小导热系数的resist，传递到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。”
如果忽略resist部件与空气的对流交换，以及忽略一些三维传热，并且假设heat部件温度均布（由于该部件的导热率非常大），我们使用热路图来表示这个模型的传热过程，如下图所示：
v_air作为变量的研究 首先，我们将空气的速度v_air作为变量进行研究。根据上面的热路图，v_air的改变，主要影响了空气与固体的对流换热系数，根据牛顿冷却定律：Q = h * A * (Ts - Tf)，物体表面的温度与对流换热系数的倒数，既1/h成正比。
使用软件计算该模型在不同空气流速下的情况，heat部件的温度与空气速度有如下关系：
上图反映的是空气的速度在[2.5,20]m/s的范围内，heat部件的平均温度的变化。在这个关系中，我们明显看出来我们最开始利用牛顿冷却定律的分析是与仿真结果吻合的。随着空气速度的增大，空气与固体的对流换热系数也增加，进而其倒数变小，最终使得heat部件的温度呈现一种非线性的反比例关系。
如果空气速度范围为[8,12]m/s,heat部件的温度变化如下图所示：
从上面可以看出，一个变量在不同的取值范围内，该变量与结果变量之间的线性关系强烈程度是不同的。
heat部件的横向位置作为变量的研究 上面我们看了热点温度和冷却空气的关系，呈现了反比例关系，为了产生更为复杂的数据，我们在原始模型上增加了一个变量，D，用来描述heat部件的横向位置，如下图红圈处所示：
既heat部件在垂直于冷却空气流速的方向上有一个位置变化，其距离plate的侧边的距离为D，下图为3个不同的D的模型的示意图。
我们只将该模型中D作为唯一的变量，其他的参数保持不变，计算了多个不同D的案例，最终形成了相应的数据集。
heat部件的温度与D的关系如下图所示:
在该模型中，只有参数D为变量，影响heat部件的温度的主要因素是D的大小，既heat部件的相对位置。如果heat部件的位置比较靠近边缘，那么从下图截面的温度分布我们可以看出，heat部件的有一侧比较靠近边缘，其与plate的换热受该侧plate的温度分布梯度影响，从而造成该侧的导热效果的降低，进而推高了heat部件的温度。
随着D的逐渐增大，heat部件向中间移动，改善了其侧面的传热能力，因此heat部件位于中间位置的时候，其温度最低。下图为heat部件位于中间位置的温度分布图。
heat部件的横向位置作为变量的数据集的机器学习研究 Scikit-learn线性回归 首先我们利用Scikit-learn的线性拟合方法对该数据集进行拟合，首先要强调的是，我们已经知道参数D与heat部件的温度T之间不是线性关系。但是，我们还是试一试。
model=LinearRegression() model.fit(X_train,y_train) 我们使用该参数作为变量通过CFD软件扫描计算得到的数据集作为研究对象，使用SK-learn的线性回归进行训练，其训练模型预测的准确度如下图所示：
其真实结果和预测结果的D vs T分布如下图所示：
我们可以明确的看出，由于该模型从物理现象的角度，D和T的关系是非线性的，因此不能使用线性拟合来进行训练数据。
Scikit-learn多项式回归 由于从物理现象我们已经得知，D和T的关系不是线性关系，我们从上面的结果可以看出，D和T大概是一个抛物线形式的关系，那我们可以利用Scikit-learn的多项式回归对该数据集进行训练。
首先我们使用2阶的多项式，因为我们刚刚猜测D和T的关系大概是抛物线的关系。
model = make_pipeline(PolynomialFeatures(degree=2), LinearRegression()) model.fit(X_train,y_train) 其训练模型预测的准确度如下图所示：</description>
    </item>
    <item>
      <title>CFD and Machine Learning Part 2: A Slightly More Complex Model - Chapter 1. Introduction</title>
      <link>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-english/</link>
      <pubDate>Sun, 24 Mar 2024 18:00:00 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-english/</guid>
      <description>Abstract In this project：
A slightly more complex model was designed, with two physical phenomena: heat transfer and convection. The model&amp;rsquo;s geometric parameters and physical boundary conditions can be altered within certain ranges. This article provides a detailed description of the model. The model includes multiple adjustable parameters, and to study the behavior of specific variables across different ranges, distinct value ranges were established. The sweep study was conducted using the Design Manager feature of Star-CCM+.</description>
    </item>
    <item>
      <title>CFD与机器学习（2）一个稍微复杂一点的模型：1.介绍</title>
      <link>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chinese/</link>
      <pubDate>Sun, 24 Mar 2024 18:00:00 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chinese/</guid>
      <description>摘要 本项目：
设计了一个包含传热和对流两种物理现象的稍微复杂一点的模型， 该模型的形状尺寸参数和物理边界条件设置都可以在一定的范围内改变， 在这篇文章中对该模型进行了详细的描述， 该模型有着多个可变化的参数参数，同时为了研究特定变量在不同的取值范围的表现，约定了不同的取值范围， 使用Star-CCM+的Design Manager功能进行sweep研究， 使用java编程和Design Manager的sweep功能，计算了不同变量个数的dataset， 可以在后面的机器学习中进行试验， 希望通过对该模型描述的物理现象出发，对数据集进行基于物理理解的分析， 然后再进行机器学习，使用不同的模型进行拟合， 来评估不同拟合模型在不同数据集下的表现， 本章首先对该研究模型进行介绍。 软硬件资源 软硬件资源同之前文章中介绍。
模型 我们这次建立了一个稍微复杂一点的模型如下图所示：
模型由4部分构成：
air heat plate resist air：流体域，进口速度为变量，温度为恒定。
heat:发热体，材料属性设置为铜，与plate之间有一个厚度为TH的resist，其长宽高分别是尺寸变量。
plate：不发热，材料属性设置为铁，其长宽为尺寸变量，其高度与heat保持一致。
resist: 不发热，材料属性中导热系数较小，Kresist=0.3 W/m-K.
该模型比之前的模型稍微复杂了一点，增加了heat与plate两个部件中的resist，主要描述的就是从heat这个部件发出一定的热量，大部分热量首先经过具有较小导热系数的resist，传递到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。
该换热模型的变量一共有如下8个：
H &amp;mdash;&amp;mdash;plate的宽， L &amp;mdash;&amp;mdash;plate的长， W &amp;mdash;&amp;mdash;plate的厚， H2 &amp;mdash;&amp;mdash;heat的宽， L2 &amp;mdash;&amp;mdash;heat的长， TH &amp;mdash;&amp;mdash;resist的厚， v_air &amp;mdash;&amp;mdash;空气的进口速度， heat &amp;mdash;&amp;mdash;heat的发热量。 下一步的准备 通过建立一个稍微复杂一点的传热和对流模型，可以对该模型有两条路线的研究：
使用机器学习的方法，以数据为出发点，探索数据之间的关系； 或者从物理现象出发，以物理学为出发点，探索数据之间的关系。 后面我们准备从简单到复杂，一点一点的分别从两个角度对该模型进行研究，更能清晰准确的理解和认识CFD和机器学习之间的关系。</description>
    </item>
    <item>
      <title>CFD and Machine Learning Part 1: A Simple Heat Transfer Model</title>
      <link>https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model-english/</link>
      <pubDate>Sat, 10 Feb 2024 18:00:19 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model-english/</guid>
      <description>Abstract This project：
Designed a simple model that includes both heat transfer and convection phenomena, where the shape, size parameters, and physical boundary conditions can be altered within a certain range Conducted a sweep study using the Design Manager feature of Star-CCM+. Utilized Java programming and the sweep functionality of Design Manager to compute 183,750 cases. Saved the input and output data of this model into a single dataset. Allowed for experiments in future machine learning.</description>
    </item>
    <item>
      <title>CFD与机器学习（1）一个简单的模型</title>
      <link>https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model/</link>
      <pubDate>Sat, 10 Feb 2024 18:00:19 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model/</guid>
      <description>摘要 本项目：
设计了一个包含传热和对流两种物理现象的简单模型，该模型的形状尺寸参数和物理边界条件设置都可以在一定的范围内改变， 使用Star-CCM+的Design Manager功能进行sweep研究， 使用java编程和Design Manager的sweep功能，计算了183,750个算例， 将该模型的输入和输出数据保存成一个单独的数据集， 可以在后面的机器学习中进行试验， 最终通过对数据集进行机器学习，得到了一个神经网络模型，可以用来进行预测任意该模型在不同参数下的热表现。 验证了如果有足够的数据，就可以通过机器学习与工程应用结合进行研究，得出有价值的成果。 软硬件资源 软件：
Star-CCM+ 3D-CAD Automation Design Manager Java Jupyter Notebook pandas numpy matplotlib pytorch 硬件：
PC 6核以上CPU 8G RAM 独立显卡 模型 模型如下图所示：
模型由3部分构成：
heat plate air heat:发热体，材料属性设置为铜，与plate紧密连接在一起，之间没有热阻。其长宽高分别是尺寸变量。
plate：不发热，材料属性设置为铁，其长宽为尺寸变量，其高度与heat保持一致。
air：流体域，进口速度为变量，温度为恒定。
该简单的模型主要描述的就是从heat这个部件发出一定的热量，大部分通过与plate接触传到到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。
该换热模型的变量一共有如下7个：
H &amp;mdash;&amp;mdash;plate的宽，范围为[50,150]mm L &amp;mdash;&amp;mdash;plate的长，范围为[50,150]mm W &amp;mdash;&amp;mdash;plate的厚，范围为[5,20]mm H2 &amp;mdash;&amp;mdash;heat的宽，范围为[5,20]mm L2 &amp;mdash;&amp;mdash;heat的长，范围为[5,20]mm v_air &amp;mdash;&amp;mdash;空气的进口速度，范围为[5,20]m/s heat &amp;mdash;&amp;mdash;heat的发热量，范围为[1,20]w 数据集 该数据集可以在如下地址下载。
该数据集的名称解释如下：
Design#	：Star-CCM+中的设计编号 &amp;ldquo;Name&amp;rdquo;	：Star-CCM+中的DM单次计算顺序 &amp;ldquo;T_d&amp;rdquo;	：空气的进出口温差 &amp;ldquo;T_inlet (C)&amp;rdquo;	：空气进口温度 &amp;ldquo;T_outlet (C)&amp;rdquo;	：空气出口温度 &amp;ldquo;energy_out&amp;rdquo;	：根据空气进出口温差计算的空气通过对流带走的热量 &amp;ldquo;heatT (C)&amp;rdquo;	：heat的平均温度 &amp;ldquo;mass (kg/s)&amp;rdquo;	：空气的质量流量 &amp;ldquo;Performance&amp;rdquo;	：DM对单次设计的性能评价，我们只是通过Sweep功能来收集数据，该项没有意义。 &amp;ldquo;H (mm)&amp;rdquo;	：plate的宽 &amp;ldquo;H2 (mm)&amp;rdquo;	：heat的宽 &amp;ldquo;L (mm)&amp;rdquo;	：plate的长 &amp;ldquo;L2 (mm)&amp;rdquo;	：heat的长 &amp;ldquo;W (mm)&amp;rdquo;	：plate的厚 &amp;ldquo;Wair (mm)&amp;rdquo;	：为模型中air的高度，设置为常量 &amp;ldquo;heat&amp;rdquo;	：heat的发热量 &amp;ldquo;v&amp;rdquo;：空气的进口速度 机器学习 将数据集导入notebook并且做一些处理，选取我们主要的输入和输出：</description>
    </item>
    <item>
      <title>Use Star-CCM&#43; Design Manager for parametric sweep simulations</title>
      <link>https://www.xuechao.net/posts/use-star-ccm-design-manager-for-parametric-sweep/</link>
      <pubDate>Tue, 06 Feb 2024 18:00:19 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/use-star-ccm-design-manager-for-parametric-sweep/</guid>
      <description>Introduciton In the new version of Star-CCM+, a very useful feature called Design Manager has been added. It is mainly used for optimization and parametric sweep simulations.
Applications The development and optimization of most engineering products involve systematic analysis of the parameters affecting their performance. Product performance is related to its primary operational characteristics, which typically refer to measurable quantities such as weight, dimensions, or resistance. Identifying key parameters and adjusting their values to improve product performance usually requires numerous design iterations.</description>
    </item>
    <item>
      <title>利用Star-CCM&#43;的Design Manager来进行扫描计算</title>
      <link>https://www.xuechao.net/posts/using-starccmp-design-manager-to-perform-sweep/</link>
      <pubDate>Mon, 05 Feb 2024 10:58:19 +0800</pubDate>
      <guid>https://www.xuechao.net/posts/using-starccmp-design-manager-to-perform-sweep/</guid>
      <description>介绍 在Star-CCM+的新的版本中增加了一个非常好用的功能————Design Manager。主要用来进行优化计算和扫描计算。
应用场景 大多数工程产品的开发和优化的方法是对影响其产品性能的参数进行系统性的分析。产品的性能受其主要运行状态特性相关，通常指的是可测量的量，如重量、尺寸或阻力。识别关键参数并调整其数值以改进产品性能的过程通常需要大量的设计迭代。
每次迭代都会使产品在某种程度上变得更好或更糟。但是，每个设计都提供了关于如何在无限多的潜在设计中寻找最终目标的宝贵信息。这些信息还是反映了整个模型的运行机理，有可能每个信息只是一个人的“盲人摸象”，但是如果能够收集到足够多的信息，使用机器学习的方法，虽然每个盲人看到的只是大象的一部分，从所有信息的角度来看，我们这一群盲人真正的能“看到”这个大象到底长得是什么样子。
研究发现 在现有的Star-CCM+版本计算中，通过sweep模式进行计算，如果单个design manager来sweep的案例较多的话，整体的计算效率会降低。
比如，如下一个sweep案例，一共12个变量，每个变量取3个值进行扫描，整体计算量为：3^12=531441,整体53万个计算要跑完！首先假定咱们也有时间和硬件来运行，当这个sweeeeeep跑上之后，发现计算效率急剧下降，通过cpu的占用可以看出来几乎没有跑满。
可能的原因：有可能是Star-CCM+本身的原因。因为，如果选择更少的变量，比如只跑其中7个变量，那么整体运算量为：3^7=2187,这个时候从始至终cpu的占用可以非常高，整体计算效率可以很高。
对策 根据前面的描述，那么我们只能将一个大的运算集分成若干个小的运算集进行，这个时候我们可以使用java编程。利用java程序，将其中若干个变量在java程序中进行迭代，剩下的变量在Star-CCM+中迭代。保证在Design manager中整体计算量不要超过3000，每个运算集完成后，其结果文件保存为单独的csv文件，后面将数据文件合并即可。
参考java文件 ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i &amp;lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j &amp;lt; heat.</description>
    </item>
  </channel>
</rss>
