[{"content":"","permalink":"https://www.xuechao.net/20240709/","summary":"","title":"20240709"},{"content":" Abstract In the previous article, the accuracy of the model in this study using SK-Learn was introduced. In this chapter:\nThe dataset from the previous chapter was fitted using neural networks,\nThe results were compared with those obtained using SK-Learn,\nThe performance of the neural network model on this dataset was evaluated.\nModel The model has already been introduced in the previous article.\nIn the earlier article, only one parameter was selected as a variable, while other parameters were kept constant. In this study, an additional variable, D, was introduced to the original model to describe the position of the heat component. To better suit the requirements of neural network models for datasets, we used a dataset containing 21 computed results.\nThe relationship between the temperature of the heat component and D is shown in the figure below:\nNeural Network Study In the previous article, \u0026ldquo;CFD and Machine Learning (1): A Simple Model,\u0026rdquo; we used a neural network structure consisting of one input layer, seven hidden layers, and one output layer. This neural network effectively fitted a model to handle the physical phenomena of our simple model.\nSo, how should the structure of a neural network be determined? How many layers are considered appropriate? How should the number of neurons in each layer be determined? In the engineering field, for example, how should the structure of a neural network be chosen for a slightly more complex heat transfer model like ours?\nWe will explore these questions in the following chapters, aiming to gain some insights into using neural networks with engineering data.\nSK-Learn Polynomial Regression In the previous chapter, we used a 4th-degree polynomial regression to train the model, and the prediction results were very good. The accuracy is shown in the figure below:\nThe distribution of the true results versus the predicted results for D vs. T is shown in the figure below:\nNeural Networks We then used a neural network for fitting. The neural network model primarily utilized linear connections and ReLU activation functions. By introducing activation functions, we aimed to simulate nonlinear phenomena.\nWe trained and predicted the same dataset using the previously mentioned neural network, which has seven hidden layers. The accuracy is shown in the figure below:\nThe distribution of the true results versus the predicted results for D vs. T is shown in the figure below:\nWe can see that the neural network also performs very well on this dataset.\nConclusion In this chapter, we examined a slightly more complex heat transfer and convection model with one parameter as a variable. We used neural networks to study the dataset and compared the results with polynomial regression. It is evident that the regression accuracy of the neural network is also very high. A sufficiently complex neural network can simulate complex physical phenomena effectively.\nIn the next chapter, we will compare polynomial regression and neural networks in terms of their requirements for dataset size.\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-3-english/","summary":"Abstract In the previous article, the accuracy of the model in this study using SK-Learn was introduced. In this chapter:\nThe dataset from the previous chapter was fitted using neural networks,\nThe results were compared with those obtained using SK-Learn,\nThe performance of the neural network model on this dataset was evaluated.\nModel The model has already been introduced in the previous article.\nIn the earlier article, only one parameter was selected as a variable, while other parameters were kept constant.","title":"CFD and Machine Learning Part 2: A Slightly More Complex Model - Chapter 3. A Single Variable - Preliminary Study of Neural Networks"},{"content":"摘要 在前面文章中介绍了本研究的模型在使用SK-Learn模型的准确度，在本章中：\n对上个章节中的数据集使用神经网络进行拟合， 将结果与SK-learn的结果进行了对比， 评估了神经网络模型在该数据集下的表现。 模型 模型在上篇文章已经做过介绍。\n在之前的文章中，只选取一个参数作为变量，其他的参数为恒定值。我们在原始模型上增加了一个变量，D，用来描述heat部件的横向位置。为了更加适应神经网络模型对于数据集的要求，我们选用了包含21个计算结果结果的数据集。\nheat部件的温度与D的关系如下图所示:\n神经网络研究 在之前的文章，既“CFD与机器学习（1）一个简单的模型”，我们使用了一个‘神经网络结构为1个输入层，7个隐藏层，1个输出层’，该神经网络很好的拟合了一个模型用于处理我们的那个简单的模型的物理现象。\n那么，神经网络的结构是该如何确定呢？一共要多少个层才算合适？每个层该如何确定神经元的个数呢？在工程领域，比如我们这个稍微复杂一点的传热模型所使用的变量该如何选择神经网络的结构呢？\n我们会在后面的章节中进行探索，试图得到一点点对于工程数据使用神经网络的一点心得。\nsk-learn多项式回归 前一章我们使用了4阶多项式回归训练模型预测的效果非常好，其准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n神经网络 我们然后使用神经网络进行一下拟合。神经网络模型主要采用了线性连接和ReLU激活函数。通过引入激活函数来模拟非线性的现象。\n我们使用一个之前的那个神经网络，既有7个隐藏层的神经网络对同样的数据集进行训练和预测。其准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n我们可以看出，神经网络在该数据集下的表现也非常好。\n结论 本章通过对一个稍微复杂一点的传热和对流模型中的一个参数作为变量，我们使用神经网络，对该数据集进行研究，并且与多项式回归进行一个对比。可以看出神经网络的回归精度也是非常高的。一个足够复杂的神经网络可以模拟出来足够复杂的物理现象。\n在下一章中，我们准备对比一下多项式回归和神经网络对于数据集大小要求的研究。\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-3-chinese/","summary":"摘要 在前面文章中介绍了本研究的模型在使用SK-Learn模型的准确度，在本章中：\n对上个章节中的数据集使用神经网络进行拟合， 将结果与SK-learn的结果进行了对比， 评估了神经网络模型在该数据集下的表现。 模型 模型在上篇文章已经做过介绍。\n在之前的文章中，只选取一个参数作为变量，其他的参数为恒定值。我们在原始模型上增加了一个变量，D，用来描述heat部件的横向位置。为了更加适应神经网络模型对于数据集的要求，我们选用了包含21个计算结果结果的数据集。\nheat部件的温度与D的关系如下图所示:\n神经网络研究 在之前的文章，既“CFD与机器学习（1）一个简单的模型”，我们使用了一个‘神经网络结构为1个输入层，7个隐藏层，1个输出层’，该神经网络很好的拟合了一个模型用于处理我们的那个简单的模型的物理现象。\n那么，神经网络的结构是该如何确定呢？一共要多少个层才算合适？每个层该如何确定神经元的个数呢？在工程领域，比如我们这个稍微复杂一点的传热模型所使用的变量该如何选择神经网络的结构呢？\n我们会在后面的章节中进行探索，试图得到一点点对于工程数据使用神经网络的一点心得。\nsk-learn多项式回归 前一章我们使用了4阶多项式回归训练模型预测的效果非常好，其准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n神经网络 我们然后使用神经网络进行一下拟合。神经网络模型主要采用了线性连接和ReLU激活函数。通过引入激活函数来模拟非线性的现象。\n我们使用一个之前的那个神经网络，既有7个隐藏层的神经网络对同样的数据集进行训练和预测。其准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n我们可以看出，神经网络在该数据集下的表现也非常好。\n结论 本章通过对一个稍微复杂一点的传热和对流模型中的一个参数作为变量，我们使用神经网络，对该数据集进行研究，并且与多项式回归进行一个对比。可以看出神经网络的回归精度也是非常高的。一个足够复杂的神经网络可以模拟出来足够复杂的物理现象。\n在下一章中，我们准备对比一下多项式回归和神经网络对于数据集大小要求的研究。","title":"CFD与机器学习（2）一个稍微复杂一点的模型：3.单变量研究-神经网络初步研究"},{"content":"Abstract In the previous article, the model used in this study was introduced. In this chapter:\nTo explore from the most fundamental and simplified perspective, one of the eight variable parameters of the model was selected for study. Different value ranges were defined to study the variable\u0026rsquo;s behavior across various ranges. Sweep calculations were performed to obtain the dataset. The analysis of the dataset is based on a physical understanding of the phenomena described by the model. Machine learning techniques were then applied, using different models for fitting. The goal was to evaluate the performance of different regression models on the dataset. Model The model has been introduced in the previous article, as shown in the figure below:\nThis heat transfer model has 8 adjustable parameters:\nH \u0026mdash;\u0026mdash; width of the plate, L \u0026mdash;\u0026mdash; length of the plate, W \u0026mdash;\u0026mdash; thickness of the plate, H2 \u0026mdash;\u0026mdash; width of the heat component, L2 \u0026mdash;\u0026mdash; length of the heat component, TH \u0026mdash;\u0026mdash; thickness of the resist layer, v_air \u0026mdash;\u0026mdash; inlet velocity of the air, heat \u0026mdash;\u0026mdash; heat generation rate of the heat component. Study of A Single Variable In this chapter, we select only one parameter as the variable, while the other parameters remain constant. The cross-section of the model is shown in the figure below:\nThe physical phenomenon reflected by the model has been introduced in our previous article: \u0026ldquo;A certain amount of heat is emitted from the \u0026lsquo;heat\u0026rsquo; component. Most of this heat first passes through the \u0026lsquo;resist,\u0026rsquo; which has a relatively low thermal conductivity, and is then transferred to the \u0026lsquo;plate.\u0026rsquo; From there, it is dissipated into the air through convective heat transfer between the \u0026lsquo;plate\u0026rsquo; and the \u0026lsquo;air.\u0026rsquo; A smaller portion of the heat from the \u0026lsquo;heat\u0026rsquo; component is directly dissipated into the \u0026lsquo;air\u0026rsquo; through convective heat transfer from the top surface of the \u0026lsquo;heat\u0026rsquo;.\u0026rdquo;\nIf we ignore the convective exchange between the \u0026lsquo;resist\u0026rsquo; component and the air, as well as some aspects of three-dimensional heat transfer, and assume that the temperature of the \u0026lsquo;heat\u0026rsquo; component is uniformly distributed (due to its very high thermal conductivity), we can use a thermal circuit diagram to represent the heat transfer process of this model, as shown in the figure below:\nv_air as the variable First, we will conduct a study with the air velocity v_air as the variable. Based on the thermal circuit diagram above, changes in v_air primarily affect the convective heat transfer coefficient between the air and the solid. According to Newton\u0026rsquo;s law of cooling: Q = h * A * (Ts - Tf) , the surface temperature of the object is inversely proportional to the convective heat transfer coefficient 1/h.\nUsing software to calculate the model\u0026rsquo;s behavior at different air velocities, the relationship between the temperature of the \u0026lsquo;heat\u0026rsquo; component and the air velocity is as follows:\nThe figure above shows the variation in the average temperature of the \u0026lsquo;heat\u0026rsquo; component over the range of air velocities range [2.5, 20] m/s. In this relationship, we can clearly see that the initial analysis using Newton\u0026rsquo;s law of cooling is consistent with the simulation results. As the air velocity increases, the convective heat transfer coefficient between the air and the solid also increases, which in turn decreases its reciprocal. This results in a nonlinear inverse relationship between air velocity and the temperature of the \u0026lsquo;heat\u0026rsquo; component.\nIf the air velocity ranges from [8, 12] m/s, the temperature variation of the heat component is shown in the figure below:\nFrom the above, it can be observed that the strength of the linear relationship between a variable and the result variable varies within different ranges of that variable.\nThe transverse position of the heat component as a variable Above, we examined the relationship between the heat temperature and the velocity of the cooling air, which exhibited an inverse proportionality. To generate more complex data, we introduced an additional variable, D, in the original model to describe the transverse position of the heat component, as indicated by the red circle in the figure below:\nThe heat component has a positional variation in the direction perpendicular to the cooling air flow, with its distance from the side edge of the plate being D. The figure below shows a schematic of the model for three different values of D:\nWe kept D as the sole variable in the model while keeping other parameters constant, and calculated multiple cases with different values of D, ultimately forming the corresponding dataset.\nThe relationship between the temperature of the heat component and D is shown in the figure below:\nIn this model, with only the parameter D as the variable, the primary factor affecting the temperature of the heat component is the size of D, which reflects the relative position of the heat component. If the heat component is positioned closer to the edge, as shown in the cross-sectional temperature distribution in the figure below, one side of the heat component is nearer to the edge. The heat exchange on this side is influenced by the temperature gradient of the plate, leading to a reduced thermal conductivity on that side and consequently increasing the temperature of the heat component.\nAs D gradually increases, the heat component moves towards the center, improving its side heat transfer capability. Therefore, when the heat component is positioned in the center, its temperature is the lowest. The figure below shows the temperature distribution of the heat component when it is located in the central position. Machine learning study of the dataset with the transverse position of the heat component as a variable Scikit-learn Linear Regression First, we use Scikit-learn\u0026rsquo;s linear fitting method to fit the dataset. It is important to emphasize that we already know that there is no linear relationship between parameter D and the temperature T of the heat component. However, we will give it a try anyway.\nmodel=LinearRegression() model.fit(X_train,y_train) We use the dataset obtained by scanning and computing with CFD software, using this parameter as a variable, as the research object. We train the model using Scikit-learn’s linear regression, and the accuracy of the predictions made by the trained model is shown in the following figure:\nThe distribution of D vs. T for the actual results and predicted results is shown in the following figure:\nWe can clearly see that, from the perspective of physical phenomena, the relationship between D and T is nonlinear. Therefore, linear fitting cannot be used to train the data.\nScikit-learn Polynomial Regression Since we already know from physical phenomena that the relationship between D and T is not linear, and from the above results, we can see that D and T approximately have a parabolic relationship, we can use Scikit-learn’s polynomial regression to train the dataset.\nFirst, we use a 2nd-degree polynomial, as we have just guessed that the relationship between D and T is likely to be parabolic.\nmodel = make_pipeline(PolynomialFeatures(degree=2), LinearRegression()) model.fit(X_train,y_train) The accuracy of the trained model\u0026rsquo;s predictions is shown in the following figure:\nThe distribution of D vs. T for the actual results and predicted results is shown in the following figure:\nWow, using a 2nd-degree polynomial regression performs much better than linear regression. However, there is still some error. So let\u0026rsquo;s try increasing the degree of the polynomial.\nThe accuracy of the predictions made by the 3rd-degree polynomial regression model is shown in the following figure:\nThe distribution of D vs. T for the actual results and predicted results with the 3rd-degree polynomial regression is shown in the following figure:\nUsing the 3rd-degree polynomial regression yields better results than the 2nd-degree polynomial regression.\nThe accuracy of the predictions made by the 4th-degree polynomial regression model is shown in the following figure:\nThe distribution of D vs. T for the actual results and predicted results with the 3rd-degree polynomial regression is shown in the following figure:\nFrom the above figure, it can be seen that the 4th-degree polynomial regression has performed very well.\nConclusion This chapter explored two approaches for studying a parameter as a variable in a slightly more complex heat transfer and convection model:\nPhysical Phenomena Approach: Starting from the theory of heat transfer and convection, the relationship between the variable and the results was investigated based on physical phenomena.\nMachine Learning Approach: Using data-driven methods, both simple linear regression and polynomial regression were applied to study the dataset.\nUnderstanding the physical phenomena thoroughly can greatly assist in selecting appropriate machine learning models and improving their accuracy.\nIn the next chapter (Chapter 3), we will use neural networks to study the dataset and compare the results with polynomial regression.\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-2-english/","summary":"Abstract In the previous article, the model used in this study was introduced. In this chapter:\nTo explore from the most fundamental and simplified perspective, one of the eight variable parameters of the model was selected for study. Different value ranges were defined to study the variable\u0026rsquo;s behavior across various ranges. Sweep calculations were performed to obtain the dataset. The analysis of the dataset is based on a physical understanding of the phenomena described by the model.","title":"CFD and Machine Learning Part 2: A Slightly More Complex Model - Chapter 2. A Single Variable(SK-Learn)"},{"content":"摘要 在前面文章中介绍了本研究的模型，在本章中：\n为了从最基础，最简化的角度来进行探索，选取模型8个可变化的参数中的1个作为变量进行研究， 同时为了研究变量在不同的取值范围的表现，约定了不同的取值范围， 使用sweep计算来获得数据集， 希望通过对该模型描述的物理现象出发，对数据集进行基于物理理解的分析， 然后再进行机器学习，使用不同的模型进行拟合， 来评估不同回归模型在不同数据集下的表现。 模型 模型在上篇文章已经做过介绍，如下图所示：\n该换热模型的可变参数一共有如下8个：\nH \u0026mdash;\u0026mdash;plate的宽， L \u0026mdash;\u0026mdash;plate的长， W \u0026mdash;\u0026mdash;plate的厚， H2 \u0026mdash;\u0026mdash;heat的宽， L2 \u0026mdash;\u0026mdash;heat的长， TH \u0026mdash;\u0026mdash;resist的厚， v_air \u0026mdash;\u0026mdash;空气的进口速度， heat \u0026mdash;\u0026mdash;heat的发热量。 单变量研究 在本章中，我们只选取一个参数作为变量，其他的参数为恒定值。该模型的截面如下图所示：\n该模型所反映的物理现象我们上个文章已经介绍：“从heat这个部件发出一定的热量，大部分热量首先经过具有较小导热系数的resist，传递到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。”\n如果忽略resist部件与空气的对流交换，以及忽略一些三维传热，并且假设heat部件温度均布（由于该部件的导热率非常大），我们使用热路图来表示这个模型的传热过程，如下图所示：\nv_air作为变量的研究 首先，我们将空气的速度v_air作为变量进行研究。根据上面的热路图，v_air的改变，主要影响了空气与固体的对流换热系数，根据牛顿冷却定律：Q = h * A * (Ts - Tf)，物体表面的温度与对流换热系数的倒数，既1/h成正比。\n使用软件计算该模型在不同空气流速下的情况，heat部件的温度与空气速度有如下关系：\n上图反映的是空气的速度在[2.5,20]m/s的范围内，heat部件的平均温度的变化。在这个关系中，我们明显看出来我们最开始利用牛顿冷却定律的分析是与仿真结果吻合的。随着空气速度的增大，空气与固体的对流换热系数也增加，进而其倒数变小，最终使得heat部件的温度呈现一种非线性的反比例关系。\n如果空气速度范围为[8,12]m/s,heat部件的温度变化如下图所示：\n从上面可以看出，一个变量在不同的取值范围内，该变量与结果变量之间的线性关系强烈程度是不同的。\nheat部件的横向位置作为变量的研究 上面我们看了热点温度和冷却空气的关系，呈现了反比例关系，为了产生更为复杂的数据，我们在原始模型上增加了一个变量，D，用来描述heat部件的横向位置，如下图红圈处所示：\n既heat部件在垂直于冷却空气流速的方向上有一个位置变化，其距离plate的侧边的距离为D，下图为3个不同的D的模型的示意图。\n我们只将该模型中D作为唯一的变量，其他的参数保持不变，计算了多个不同D的案例，最终形成了相应的数据集。\nheat部件的温度与D的关系如下图所示:\n在该模型中，只有参数D为变量，影响heat部件的温度的主要因素是D的大小，既heat部件的相对位置。如果heat部件的位置比较靠近边缘，那么从下图截面的温度分布我们可以看出，heat部件的有一侧比较靠近边缘，其与plate的换热受该侧plate的温度分布梯度影响，从而造成该侧的导热效果的降低，进而推高了heat部件的温度。\n随着D的逐渐增大，heat部件向中间移动，改善了其侧面的传热能力，因此heat部件位于中间位置的时候，其温度最低。下图为heat部件位于中间位置的温度分布图。\nheat部件的横向位置作为变量的数据集的机器学习研究 Scikit-learn线性回归 首先我们利用Scikit-learn的线性拟合方法对该数据集进行拟合，首先要强调的是，我们已经知道参数D与heat部件的温度T之间不是线性关系。但是，我们还是试一试。\nmodel=LinearRegression() model.fit(X_train,y_train) 我们使用该参数作为变量通过CFD软件扫描计算得到的数据集作为研究对象，使用SK-learn的线性回归进行训练，其训练模型预测的准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n我们可以明确的看出，由于该模型从物理现象的角度，D和T的关系是非线性的，因此不能使用线性拟合来进行训练数据。\nScikit-learn多项式回归 由于从物理现象我们已经得知，D和T的关系不是线性关系，我们从上面的结果可以看出，D和T大概是一个抛物线形式的关系，那我们可以利用Scikit-learn的多项式回归对该数据集进行训练。\n首先我们使用2阶的多项式，因为我们刚刚猜测D和T的关系大概是抛物线的关系。\nmodel = make_pipeline(PolynomialFeatures(degree=2), LinearRegression()) model.fit(X_train,y_train) 其训练模型预测的准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n哇哦，使用2阶多项式回归的效果比线性回归要好的多。但是还是有一点误差。那么我们试试增加多项式的阶数。\n3阶多项式回归训练模型预测的准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n使用3阶多项式回归的效果比2阶多项式回归要好。\n4阶多项式回归训练模型预测的准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n从上面的图可以看出，使用4阶多项式回归的效果已经非常好了。\n结论 本章通过对一个稍微复杂一点的传热和对流模型中的一个参数作为变量，分别进行了两条路线的研究：\n首先，从物理现象出发，以传热和对流换热理论为出发点，对变量和结果之间的相互关系进行了研究； 其次，使用机器学习的方法，以数据为出发点，使用简单的线性回归和多项式回归对数据集进行研究； 如果能够对物理现象有足够多认识的话，可以对我们选用机器学习模型的时候有很大的帮助，能够提高机器学习的准确度。 接下来，在第3章中，我们准备使用神经网络，对该数据集进行研究，并且与多项式回归进行一个对比。\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chapter-2-chinese/","summary":"摘要 在前面文章中介绍了本研究的模型，在本章中：\n为了从最基础，最简化的角度来进行探索，选取模型8个可变化的参数中的1个作为变量进行研究， 同时为了研究变量在不同的取值范围的表现，约定了不同的取值范围， 使用sweep计算来获得数据集， 希望通过对该模型描述的物理现象出发，对数据集进行基于物理理解的分析， 然后再进行机器学习，使用不同的模型进行拟合， 来评估不同回归模型在不同数据集下的表现。 模型 模型在上篇文章已经做过介绍，如下图所示：\n该换热模型的可变参数一共有如下8个：\nH \u0026mdash;\u0026mdash;plate的宽， L \u0026mdash;\u0026mdash;plate的长， W \u0026mdash;\u0026mdash;plate的厚， H2 \u0026mdash;\u0026mdash;heat的宽， L2 \u0026mdash;\u0026mdash;heat的长， TH \u0026mdash;\u0026mdash;resist的厚， v_air \u0026mdash;\u0026mdash;空气的进口速度， heat \u0026mdash;\u0026mdash;heat的发热量。 单变量研究 在本章中，我们只选取一个参数作为变量，其他的参数为恒定值。该模型的截面如下图所示：\n该模型所反映的物理现象我们上个文章已经介绍：“从heat这个部件发出一定的热量，大部分热量首先经过具有较小导热系数的resist，传递到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。”\n如果忽略resist部件与空气的对流交换，以及忽略一些三维传热，并且假设heat部件温度均布（由于该部件的导热率非常大），我们使用热路图来表示这个模型的传热过程，如下图所示：\nv_air作为变量的研究 首先，我们将空气的速度v_air作为变量进行研究。根据上面的热路图，v_air的改变，主要影响了空气与固体的对流换热系数，根据牛顿冷却定律：Q = h * A * (Ts - Tf)，物体表面的温度与对流换热系数的倒数，既1/h成正比。\n使用软件计算该模型在不同空气流速下的情况，heat部件的温度与空气速度有如下关系：\n上图反映的是空气的速度在[2.5,20]m/s的范围内，heat部件的平均温度的变化。在这个关系中，我们明显看出来我们最开始利用牛顿冷却定律的分析是与仿真结果吻合的。随着空气速度的增大，空气与固体的对流换热系数也增加，进而其倒数变小，最终使得heat部件的温度呈现一种非线性的反比例关系。\n如果空气速度范围为[8,12]m/s,heat部件的温度变化如下图所示：\n从上面可以看出，一个变量在不同的取值范围内，该变量与结果变量之间的线性关系强烈程度是不同的。\nheat部件的横向位置作为变量的研究 上面我们看了热点温度和冷却空气的关系，呈现了反比例关系，为了产生更为复杂的数据，我们在原始模型上增加了一个变量，D，用来描述heat部件的横向位置，如下图红圈处所示：\n既heat部件在垂直于冷却空气流速的方向上有一个位置变化，其距离plate的侧边的距离为D，下图为3个不同的D的模型的示意图。\n我们只将该模型中D作为唯一的变量，其他的参数保持不变，计算了多个不同D的案例，最终形成了相应的数据集。\nheat部件的温度与D的关系如下图所示:\n在该模型中，只有参数D为变量，影响heat部件的温度的主要因素是D的大小，既heat部件的相对位置。如果heat部件的位置比较靠近边缘，那么从下图截面的温度分布我们可以看出，heat部件的有一侧比较靠近边缘，其与plate的换热受该侧plate的温度分布梯度影响，从而造成该侧的导热效果的降低，进而推高了heat部件的温度。\n随着D的逐渐增大，heat部件向中间移动，改善了其侧面的传热能力，因此heat部件位于中间位置的时候，其温度最低。下图为heat部件位于中间位置的温度分布图。\nheat部件的横向位置作为变量的数据集的机器学习研究 Scikit-learn线性回归 首先我们利用Scikit-learn的线性拟合方法对该数据集进行拟合，首先要强调的是，我们已经知道参数D与heat部件的温度T之间不是线性关系。但是，我们还是试一试。\nmodel=LinearRegression() model.fit(X_train,y_train) 我们使用该参数作为变量通过CFD软件扫描计算得到的数据集作为研究对象，使用SK-learn的线性回归进行训练，其训练模型预测的准确度如下图所示：\n其真实结果和预测结果的D vs T分布如下图所示：\n我们可以明确的看出，由于该模型从物理现象的角度，D和T的关系是非线性的，因此不能使用线性拟合来进行训练数据。\nScikit-learn多项式回归 由于从物理现象我们已经得知，D和T的关系不是线性关系，我们从上面的结果可以看出，D和T大概是一个抛物线形式的关系，那我们可以利用Scikit-learn的多项式回归对该数据集进行训练。\n首先我们使用2阶的多项式，因为我们刚刚猜测D和T的关系大概是抛物线的关系。\nmodel = make_pipeline(PolynomialFeatures(degree=2), LinearRegression()) model.fit(X_train,y_train) 其训练模型预测的准确度如下图所示：","title":"CFD与机器学习（2）一个稍微复杂一点的模型：2.单变量研究（SK-Learn）"},{"content":"Abstract In this project：\nA slightly more complex model was designed, with two physical phenomena: heat transfer and convection. The model\u0026rsquo;s geometric parameters and physical boundary conditions can be altered within certain ranges. This article provides a detailed description of the model. The model includes multiple adjustable parameters, and to study the behavior of specific variables across different ranges, distinct value ranges were established. The sweep study was conducted using the Design Manager feature of Star-CCM+. Java programming and the sweep functionality of Design Manager were used to calculate datasets with varying numbers of variables. These datasets can be used in subsequent machine learning experiments. The goal is to start from a physical understanding of the phenomena described by the model, analyze the datasets accordingly, and then proceed with machine learning, using different models to fit the data. This will allow us to evaluate the performance of different fitting models on various datasets. This chapter first introduces the research model. Model This time, we have built a slightly more complex model as shown in the figure below:\nThe model is composed of four parts：：\nair heat plate resist air：Fluid region，The inlet velocity is a variable, while the temperature is constant。\nheat:A heating element with material properties set to copper. There is a resist layer with a thickness of TH between it and the plate, with its length, width, and height being dimensional variables.\nplate：Non-heating, with material properties set to iron. Its length and width are dimensional variables, and its height is consistent with that of the heating element.\nresist: Non-heating, with a low thermal conductivity in its material properties, where K_resist = 0.3 W/m-K.\nThis model is slightly more complex than the previous one, with the addition of a resist layer between the two components: heat and plate. The model primarily describes how a certain amount of heat is emitted from the heat component. Most of the heat first passes through the resist, which has a low thermal conductivity, and is then transferred to the plate. Afterward, the heat is dissipated into the air through convective heat transfer between the plate and air. A smaller portion of the heat from the heat component is directly dissipated into the air through convective heat transfer from its top surface.\nThe heat transfer model includes the following 8 variables:\nH \u0026mdash;\u0026mdash; width of the plate, L \u0026mdash;\u0026mdash; length of the plate, W \u0026mdash;\u0026mdash; thickness of the plate, H2 \u0026mdash;\u0026mdash; width of the heat component, L2 \u0026mdash;\u0026mdash; length of the heat component, TH \u0026mdash;\u0026mdash; thickness of the resist layer, v_air \u0026mdash;\u0026mdash; inlet velocity of the air, heat \u0026mdash;\u0026mdash; heat generation rate of the heat component. Next Steps By establishing a slightly more complex heat transfer and convection model, two research approaches can be taken for this model:\nUsing machine learning methods, starting from the data to explore the relationships between the data; Or starting from the physical phenomena, using physics as a basis to explore the relationships between the data. Moving forward, we plan to study the model gradually from simple to complex from both perspectives. This will allow for a clearer and more accurate understanding of the relationship between CFD and machine learning.\nLet\u0026rsquo;s get started then!\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-english/","summary":"Abstract In this project：\nA slightly more complex model was designed, with two physical phenomena: heat transfer and convection. The model\u0026rsquo;s geometric parameters and physical boundary conditions can be altered within certain ranges. This article provides a detailed description of the model. The model includes multiple adjustable parameters, and to study the behavior of specific variables across different ranges, distinct value ranges were established. The sweep study was conducted using the Design Manager feature of Star-CCM+.","title":"CFD and Machine Learning Part 2: A Slightly More Complex Model - Chapter 1. Introduction"},{"content":"摘要 本项目：\n设计了一个包含传热和对流两种物理现象的稍微复杂一点的模型， 该模型的形状尺寸参数和物理边界条件设置都可以在一定的范围内改变， 在这篇文章中对该模型进行了详细的描述， 该模型有着多个可变化的参数参数，同时为了研究特定变量在不同的取值范围的表现，约定了不同的取值范围， 使用Star-CCM+的Design Manager功能进行sweep研究， 使用java编程和Design Manager的sweep功能，计算了不同变量个数的dataset， 可以在后面的机器学习中进行试验， 希望通过对该模型描述的物理现象出发，对数据集进行基于物理理解的分析， 然后再进行机器学习，使用不同的模型进行拟合， 来评估不同拟合模型在不同数据集下的表现， 本章首先对该研究模型进行介绍。 软硬件资源 软硬件资源同之前文章中介绍。\n模型 我们这次建立了一个稍微复杂一点的模型如下图所示：\n模型由4部分构成：\nair heat plate resist air：流体域，进口速度为变量，温度为恒定。\nheat:发热体，材料属性设置为铜，与plate之间有一个厚度为TH的resist，其长宽高分别是尺寸变量。\nplate：不发热，材料属性设置为铁，其长宽为尺寸变量，其高度与heat保持一致。\nresist: 不发热，材料属性中导热系数较小，Kresist=0.3 W/m-K.\n该模型比之前的模型稍微复杂了一点，增加了heat与plate两个部件中的resist，主要描述的就是从heat这个部件发出一定的热量，大部分热量首先经过具有较小导热系数的resist，传递到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。\n该换热模型的变量一共有如下8个：\nH \u0026mdash;\u0026mdash;plate的宽， L \u0026mdash;\u0026mdash;plate的长， W \u0026mdash;\u0026mdash;plate的厚， H2 \u0026mdash;\u0026mdash;heat的宽， L2 \u0026mdash;\u0026mdash;heat的长， TH \u0026mdash;\u0026mdash;resist的厚， v_air \u0026mdash;\u0026mdash;空气的进口速度， heat \u0026mdash;\u0026mdash;heat的发热量。 下一步的准备 通过建立一个稍微复杂一点的传热和对流模型，可以对该模型有两条路线的研究：\n使用机器学习的方法，以数据为出发点，探索数据之间的关系； 或者从物理现象出发，以物理学为出发点，探索数据之间的关系。 后面我们准备从简单到复杂，一点一点的分别从两个角度对该模型进行研究，更能清晰准确的理解和认识CFD和机器学习之间的关系。\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine_learning-part-2-a-slightly-more-complex-model-chinese/","summary":"摘要 本项目：\n设计了一个包含传热和对流两种物理现象的稍微复杂一点的模型， 该模型的形状尺寸参数和物理边界条件设置都可以在一定的范围内改变， 在这篇文章中对该模型进行了详细的描述， 该模型有着多个可变化的参数参数，同时为了研究特定变量在不同的取值范围的表现，约定了不同的取值范围， 使用Star-CCM+的Design Manager功能进行sweep研究， 使用java编程和Design Manager的sweep功能，计算了不同变量个数的dataset， 可以在后面的机器学习中进行试验， 希望通过对该模型描述的物理现象出发，对数据集进行基于物理理解的分析， 然后再进行机器学习，使用不同的模型进行拟合， 来评估不同拟合模型在不同数据集下的表现， 本章首先对该研究模型进行介绍。 软硬件资源 软硬件资源同之前文章中介绍。\n模型 我们这次建立了一个稍微复杂一点的模型如下图所示：\n模型由4部分构成：\nair heat plate resist air：流体域，进口速度为变量，温度为恒定。\nheat:发热体，材料属性设置为铜，与plate之间有一个厚度为TH的resist，其长宽高分别是尺寸变量。\nplate：不发热，材料属性设置为铁，其长宽为尺寸变量，其高度与heat保持一致。\nresist: 不发热，材料属性中导热系数较小，Kresist=0.3 W/m-K.\n该模型比之前的模型稍微复杂了一点，增加了heat与plate两个部件中的resist，主要描述的就是从heat这个部件发出一定的热量，大部分热量首先经过具有较小导热系数的resist，传递到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。\n该换热模型的变量一共有如下8个：\nH \u0026mdash;\u0026mdash;plate的宽， L \u0026mdash;\u0026mdash;plate的长， W \u0026mdash;\u0026mdash;plate的厚， H2 \u0026mdash;\u0026mdash;heat的宽， L2 \u0026mdash;\u0026mdash;heat的长， TH \u0026mdash;\u0026mdash;resist的厚， v_air \u0026mdash;\u0026mdash;空气的进口速度， heat \u0026mdash;\u0026mdash;heat的发热量。 下一步的准备 通过建立一个稍微复杂一点的传热和对流模型，可以对该模型有两条路线的研究：\n使用机器学习的方法，以数据为出发点，探索数据之间的关系； 或者从物理现象出发，以物理学为出发点，探索数据之间的关系。 后面我们准备从简单到复杂，一点一点的分别从两个角度对该模型进行研究，更能清晰准确的理解和认识CFD和机器学习之间的关系。","title":"CFD与机器学习（2）一个稍微复杂一点的模型：1.介绍"},{"content":" This is a Blog for CFD, Simulation and Machine Learing .\nEmail: xuechao@gmail.com\n","permalink":"https://www.xuechao.net/about/","summary":"This is a Blog for CFD, Simulation and Machine Learing .\nEmail: xuechao@gmail.com","title":"About"},{"content":"Abstract This project：\nDesigned a simple model that includes both heat transfer and convection phenomena, where the shape, size parameters, and physical boundary conditions can be altered within a certain range Conducted a sweep study using the Design Manager feature of Star-CCM+. Utilized Java programming and the sweep functionality of Design Manager to compute 183,750 cases. Saved the input and output data of this model into a single dataset. Allowed for experiments in future machine learning. Ultimately, through machine learning on the dataset, developed a neural network model capable of predicting the thermal performance of the model under various parameters. Verified that with sufficient data, valuable outcomes can be achieved by combining machine learning with engineering applications. Hardware and Software Resources Software：\nStar-CCM+ 3D-CAD Automation Design Manager Java Jupyter Notebook pandas numpy matplotlib pytorch Hardware：\nPC CPU with 6 or more cores 8G RAM GPU Simulation Model The model is shown in the following figure：\nThe model is composed of threee parts：\nheat plate air heat: The part of heat source, with material properties set to copper, is tightly connected to the plate with no thermal resistance between them. Its length, width, and height are defined as variable dimensions.\nplate：Non-heating, with material properties set to iron, its length and width are variable dimensions, while its height remains consistant with the heat source part.\nair：Fluid region, with inlet velocity as a variable , but temperature is constant.\nThis simple model is that the heat part generate a certain amount of heat, with the majority being transfer to the plate through contact, and then dissipated into the air by convection. A small portion of the heat is directly transfered to the air by convection at the top surface of the heat part.\nThis heat transfer model includes the following 7 variables：\nH \u0026mdash;\u0026mdash;The width of the plate，range [50,150]mm L \u0026mdash;\u0026mdash;The length of the plate, range [50,150]mm W \u0026mdash;\u0026mdash;The thickness of the plate，range [5,20]mm H2 \u0026mdash;\u0026mdash;The width of the heat，range [5,20]mm L2 \u0026mdash;\u0026mdash;The length of the heat，range [5,20]mm v_air \u0026mdash;\u0026mdash;The inlet velocity of the air，range [5,20]m/s heat \u0026mdash;\u0026mdash;The amount of the heat generation of the heat part，range [1,20]w Dataset The dataset can be downloaded from this address.\nThe explaination of the variable names in the dataset is as follows：\nDesign#\t：The design number of each Star-CCM+ design case. \u0026ldquo;Name\u0026rdquo;\t：The name of each Star-CCM+ design case. \u0026ldquo;T_d\u0026rdquo;\t：The temperature difference between the air inlet and outlet. \u0026ldquo;T_inlet (C)\u0026rdquo;\t：The temperature of the air inlet. \u0026ldquo;T_outlet (C)\u0026rdquo;\t：The temperature of the air outlet. \u0026ldquo;energy_out\u0026rdquo;\t：The heat carried away by the air through convection, calculated based on the temperature difference between the air inlet and outlet. \u0026ldquo;heatT (C)\u0026rdquo;\t：The average temperature of the heat part. \u0026ldquo;mass (kg/s)\u0026rdquo;\t：The mass flow rate of the air. \u0026ldquo;Performance\u0026rdquo;\t：The performance evaluation of a single design by DM is not meaningful, as we only collect data using the sweep funciton. \u0026ldquo;H (mm)\u0026rdquo;\t：The width of the plate. \u0026ldquo;H2 (mm)\u0026rdquo;\t：The width of the heat part. \u0026ldquo;L (mm)\u0026rdquo;\t：The length of the plate. \u0026ldquo;L2 (mm)\u0026rdquo;\t：The length of the heat part. \u0026ldquo;W (mm)\u0026rdquo;\t：The thickness of the plate. \u0026ldquo;Wair (mm)\u0026rdquo;\t：The thickness of the air setting as a constant. \u0026ldquo;heat\u0026rdquo;\t：The amount of the heat generation of the heat part. \u0026ldquo;v\u0026rdquo;：The inlet velocity of the air. Machine Learning Import the dataset into the Notebook and do some cleaning, and select inputs and output.\ndf.columns Index([\u0026#39;Design#\u0026#39;, \u0026#39;Name\u0026#39;, \u0026#39;T_d\u0026#39;, \u0026#39;T_inlet(C)\u0026#39;, \u0026#39;T_outlet(C)\u0026#39;, \u0026#39;energy_out\u0026#39;, \u0026#39;heatT(C)\u0026#39;, \u0026#39;mass(kg/s)\u0026#39;, \u0026#39;Performance\u0026#39;, \u0026#39;H(mm)\u0026#39;, \u0026#39;H2(mm)\u0026#39;, \u0026#39;L(mm)\u0026#39;, \u0026#39;L2(mm)\u0026#39;, \u0026#39;W(mm)\u0026#39;, \u0026#39;Wair(mm)\u0026#39;, \u0026#39;heat\u0026#39;, \u0026#39;v\u0026#39;], dtype=\u0026#39;object\u0026#39;) selected_columns = [ \u0026#39;H(mm)\u0026#39;, \u0026#39;H2(mm)\u0026#39;, \u0026#39;L(mm)\u0026#39;,\u0026#39;L2(mm)\u0026#39;, \u0026#39;W(mm)\u0026#39;, \u0026#39;heat\u0026#39;, \u0026#39;v\u0026#39;,\u0026#39;heatT(C)\u0026#39;] df =df[selected_columns] df.head() df.describe() The linear correlation among the dataset variables is shown in the following figure.\nPerform linear regression using scikit-learn(SK-learn): model=LinearRegression() model.fit(X_train,y_train) In the test set, the correspondence between predicted values and actual values is as follows:\nThe evaluation of prediciton accuracy on the test set is as follows:\nR2 score: 0.7899667696453285 Mean Squared Error: 104.53257228500799 Mean Absolute Error: 6.8060228938554435 Training with a neural network： The neural network model primarily employs linear connections and ReLU activation functions.\nThe neural network structure consists of 1 input layer, 7 hidden layers, and 1 output layer. Using multiple hidden layers with sufficient neurons in each layer allows us to model complex physical phenomena. By using the ReLU activation function, we can simulate non-linear phenomena in heat transfer and convection. def create_model_more_hidden_layers(num_input_cols,num_output_cols): model=nn.Sequential( nn.Linear(num_input_cols,10), nn.ReLU(), nn.Linear(10,50), nn.ReLU(), nn.Linear(50,100), nn.ReLU(), nn.Linear(100,100), nn.ReLU(), nn.Linear(100,100), nn.ReLU(), nn.Linear(100,100), nn.ReLU(), nn.Linear(100,50), nn.ReLU(), nn.Linear(50,10), nn.ReLU(), nn.Linear(10,num_output_cols) # Output Layer with 1 neuron ) return model num_input_cols = X_train.shape[1] num_output_cols=1 num_epochs=10000 learning_rate=0.0001 model= create_model_more_hidden_layers(num_input_cols,num_output_cols).to(device) train_test_model(model,X_train,y_train,X_test,y_test,num_epochs,learning_rate) In the test set, the correspondence between predicted values and actual values is as follows:\nThe evaluation of prediciton accuracy on the test set is as follows:\nR2 score: 0.9957430057650765 Mean Squared Error: 2.1337025 Mean Absolute Error: 1.0782065 Conclusion Through the entire research process of a simple heat transfer and convection model described above, it is evident that using neural networks for machine learning can train effective models for predicting complex physical phenomena.\nWhile the data used in this project was obtained through extensive calculations, conducting machine learning with simulation-generated data holds significant importance for several reasons:\nRichness of Data: Simulation can generate large volumes of diverse data, crucial for training complex machine learning models, especially when lack of real-world data or it\u0026rsquo;s costly to obtain.\nCost-effectiveness: Generating simulation data is often less costly compared to collecting data in the real world, and it can be generated in large quantities within a short period.\nControl: Simulations allow precise control over vairiables, facilitating the study of specific conditions\u0026rsquo; impact on model performance, which aids in model optimization and validation.\nCoverage of Extreme Cases: Simulations can simulate extreme scenarios that are rare in real-world situations, provideing comprehensive training data for machine learning models to enhance performance across varous conditions.\nFurther Considerations It has been verified that using a large amount of data reflecting model features for machine learning can form a complete closed loop. We can leverage any accumulated engineering data to re-understand and reinterpret it through machine learning, and even train machine models for new optimized design calculations.\nThis simple model is indeed very basic, with a very small overall mesh size. Calculating approximately 180,000 sets of data took about 2-3 weeks. If a more complex model has a slightly larger mesh size and each case takes more than ten minutes to compute, then isn\u0026rsquo;t it impossible to obtain such a large dataset?\n","permalink":"https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model-english/","summary":"Abstract This project：\nDesigned a simple model that includes both heat transfer and convection phenomena, where the shape, size parameters, and physical boundary conditions can be altered within a certain range Conducted a sweep study using the Design Manager feature of Star-CCM+. Utilized Java programming and the sweep functionality of Design Manager to compute 183,750 cases. Saved the input and output data of this model into a single dataset. Allowed for experiments in future machine learning.","title":"CFD and Machine Learning Part 1: A Simple Heat Transfer Model"},{"content":"摘要 本项目：\n设计了一个包含传热和对流两种物理现象的简单模型，该模型的形状尺寸参数和物理边界条件设置都可以在一定的范围内改变， 使用Star-CCM+的Design Manager功能进行sweep研究， 使用java编程和Design Manager的sweep功能，计算了183,750个算例， 将该模型的输入和输出数据保存成一个单独的数据集， 可以在后面的机器学习中进行试验， 最终通过对数据集进行机器学习，得到了一个神经网络模型，可以用来进行预测任意该模型在不同参数下的热表现。 验证了如果有足够的数据，就可以通过机器学习与工程应用结合进行研究，得出有价值的成果。 软硬件资源 软件：\nStar-CCM+ 3D-CAD Automation Design Manager Java Jupyter Notebook pandas numpy matplotlib pytorch 硬件：\nPC 6核以上CPU 8G RAM 独立显卡 模型 模型如下图所示：\n模型由3部分构成：\nheat plate air heat:发热体，材料属性设置为铜，与plate紧密连接在一起，之间没有热阻。其长宽高分别是尺寸变量。\nplate：不发热，材料属性设置为铁，其长宽为尺寸变量，其高度与heat保持一致。\nair：流体域，进口速度为变量，温度为恒定。\n该简单的模型主要描述的就是从heat这个部件发出一定的热量，大部分通过与plate接触传到到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。\n该换热模型的变量一共有如下7个：\nH \u0026mdash;\u0026mdash;plate的宽，范围为[50,150]mm L \u0026mdash;\u0026mdash;plate的长，范围为[50,150]mm W \u0026mdash;\u0026mdash;plate的厚，范围为[5,20]mm H2 \u0026mdash;\u0026mdash;heat的宽，范围为[5,20]mm L2 \u0026mdash;\u0026mdash;heat的长，范围为[5,20]mm v_air \u0026mdash;\u0026mdash;空气的进口速度，范围为[5,20]m/s heat \u0026mdash;\u0026mdash;heat的发热量，范围为[1,20]w 数据集 该数据集可以在如下地址下载。\n该数据集的名称解释如下：\nDesign#\t：Star-CCM+中的设计编号 \u0026ldquo;Name\u0026rdquo;\t：Star-CCM+中的DM单次计算顺序 \u0026ldquo;T_d\u0026rdquo;\t：空气的进出口温差 \u0026ldquo;T_inlet (C)\u0026rdquo;\t：空气进口温度 \u0026ldquo;T_outlet (C)\u0026rdquo;\t：空气出口温度 \u0026ldquo;energy_out\u0026rdquo;\t：根据空气进出口温差计算的空气通过对流带走的热量 \u0026ldquo;heatT (C)\u0026rdquo;\t：heat的平均温度 \u0026ldquo;mass (kg/s)\u0026rdquo;\t：空气的质量流量 \u0026ldquo;Performance\u0026rdquo;\t：DM对单次设计的性能评价，我们只是通过Sweep功能来收集数据，该项没有意义。 \u0026ldquo;H (mm)\u0026rdquo;\t：plate的宽 \u0026ldquo;H2 (mm)\u0026rdquo;\t：heat的宽 \u0026ldquo;L (mm)\u0026rdquo;\t：plate的长 \u0026ldquo;L2 (mm)\u0026rdquo;\t：heat的长 \u0026ldquo;W (mm)\u0026rdquo;\t：plate的厚 \u0026ldquo;Wair (mm)\u0026rdquo;\t：为模型中air的高度，设置为常量 \u0026ldquo;heat\u0026rdquo;\t：heat的发热量 \u0026ldquo;v\u0026rdquo;：空气的进口速度 机器学习 将数据集导入notebook并且做一些处理，选取我们主要的输入和输出：\ndf.columns Index([\u0026#39;Design#\u0026#39;, \u0026#39;Name\u0026#39;, \u0026#39;T_d\u0026#39;, \u0026#39;T_inlet(C)\u0026#39;, \u0026#39;T_outlet(C)\u0026#39;, \u0026#39;energy_out\u0026#39;, \u0026#39;heatT(C)\u0026#39;, \u0026#39;mass(kg/s)\u0026#39;, \u0026#39;Performance\u0026#39;, \u0026#39;H(mm)\u0026#39;, \u0026#39;H2(mm)\u0026#39;, \u0026#39;L(mm)\u0026#39;, \u0026#39;L2(mm)\u0026#39;, \u0026#39;W(mm)\u0026#39;, \u0026#39;Wair(mm)\u0026#39;, \u0026#39;heat\u0026#39;, \u0026#39;v\u0026#39;], dtype=\u0026#39;object\u0026#39;) selected_columns = [ \u0026#39;H(mm)\u0026#39;, \u0026#39;H2(mm)\u0026#39;, \u0026#39;L(mm)\u0026#39;,\u0026#39;L2(mm)\u0026#39;, \u0026#39;W(mm)\u0026#39;, \u0026#39;heat\u0026#39;, \u0026#39;v\u0026#39;,\u0026#39;heatT(C)\u0026#39;] df =df[selected_columns] df.head() df.describe() 数据集数据之间的线性相关性如下图所示：\n使用SK-learn线性拟合： model=LinearRegression() model.fit(X_train,y_train) 测试集中，其预测值与实际值的对应关系如下：\n测试集的预测准确性评价如下：\nR2 score: 0.7899667696453285 Mean Squared Error: 104.53257228500799 Mean Absolute Error: 6.8060228938554435 使用神经网络进行学习： 神经网络模型主要采用了线性连接和ReLU激活函数。\n神经网络结构为1个输入层，7个隐藏层，1个输出层； 通过多个隐藏层，和每个隐藏层足够多的神经元，可以拟合比较复杂的物理现象； 通过使用ReLU激活函数，我们可以模拟传热和对流过程中的非线性现象。 def create_model_more_hidden_layers(num_input_cols,num_output_cols): model=nn.Sequential( nn.Linear(num_input_cols,10), nn.ReLU(), nn.Linear(10,50), nn.ReLU(), nn.Linear(50,100), nn.ReLU(), nn.Linear(100,100), nn.ReLU(), nn.Linear(100,100), nn.ReLU(), nn.Linear(100,100), nn.ReLU(), nn.Linear(100,50), nn.ReLU(), nn.Linear(50,10), nn.ReLU(), nn.Linear(10,num_output_cols) # Output Layer with 1 neuron ) return model num_input_cols = X_train.shape[1] num_output_cols=1 num_epochs=10000 learning_rate=0.0001 model= create_model_more_hidden_layers(num_input_cols,num_output_cols).to(device) train_test_model(model,X_train,y_train,X_test,y_test,num_epochs,learning_rate) 测试集中，其预测值与实际值的对应关系如下：\n测试集的预测准确性评价如下：\nR2 score: 0.9957430057650765 Mean Squared Error: 2.1337025 Mean Absolute Error: 1.0782065 结论 通过以上一个简单传热和对流模型的整个研究过程，可以看出，在采用神经网络进行机器学习可以训练出来很好的模型用于预测复杂的物理现象。\n虽然本项目使用的数据是通过大量的计算得到的，但是通过仿真获得大量数据进行机器学习也有以下重要意义：\n数据丰富性：仿真可以生成大量多样化的数据，这对于训练复杂的机器学习模型尤为重要，尤其是在实际数据稀缺或获取成本高的情况下。\n成本效益：相比于现实中收集数据的高昂成本，仿真数据的生成成本通常较低，而且可以在较短时间内生成大量数据。\n可控性：仿真环境下可以精确控制变量，方便研究特定条件对模型表现的影响，有助于模型的优化和验证。\n覆盖极端情况：仿真可以模拟现实中难以遇到的极端情况，为机器学习模型提供全面的训练数据，提高模型在各种情况下的表现。\n进一步的思考 已经验证了通过大量反映模型特征的数据进行机器学习行成整个闭环，我们可以利用任何我们积累的工程数据，通过机器学习来进行重新认识和解读，甚至可以训练机器模型用于新的优化设计计算。 这个简单的模型非常简单，整体网格量也非常少，计算这大约18万组数据消耗的时间大约2-3周。如果一个更为复杂的模型，网格量稍微多一点，单个case计算时间以十几分钟计的话，那么是不是不可能得到一个如此巨大的数据集？ ","permalink":"https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model/","summary":"摘要 本项目：\n设计了一个包含传热和对流两种物理现象的简单模型，该模型的形状尺寸参数和物理边界条件设置都可以在一定的范围内改变， 使用Star-CCM+的Design Manager功能进行sweep研究， 使用java编程和Design Manager的sweep功能，计算了183,750个算例， 将该模型的输入和输出数据保存成一个单独的数据集， 可以在后面的机器学习中进行试验， 最终通过对数据集进行机器学习，得到了一个神经网络模型，可以用来进行预测任意该模型在不同参数下的热表现。 验证了如果有足够的数据，就可以通过机器学习与工程应用结合进行研究，得出有价值的成果。 软硬件资源 软件：\nStar-CCM+ 3D-CAD Automation Design Manager Java Jupyter Notebook pandas numpy matplotlib pytorch 硬件：\nPC 6核以上CPU 8G RAM 独立显卡 模型 模型如下图所示：\n模型由3部分构成：\nheat plate air heat:发热体，材料属性设置为铜，与plate紧密连接在一起，之间没有热阻。其长宽高分别是尺寸变量。\nplate：不发热，材料属性设置为铁，其长宽为尺寸变量，其高度与heat保持一致。\nair：流体域，进口速度为变量，温度为恒定。\n该简单的模型主要描述的就是从heat这个部件发出一定的热量，大部分通过与plate接触传到到plate上面，然后经过plate与air的对流换热散发到air中去，heat还有较少部分热量通过heat顶面与air直接对流换热。\n该换热模型的变量一共有如下7个：\nH \u0026mdash;\u0026mdash;plate的宽，范围为[50,150]mm L \u0026mdash;\u0026mdash;plate的长，范围为[50,150]mm W \u0026mdash;\u0026mdash;plate的厚，范围为[5,20]mm H2 \u0026mdash;\u0026mdash;heat的宽，范围为[5,20]mm L2 \u0026mdash;\u0026mdash;heat的长，范围为[5,20]mm v_air \u0026mdash;\u0026mdash;空气的进口速度，范围为[5,20]m/s heat \u0026mdash;\u0026mdash;heat的发热量，范围为[1,20]w 数据集 该数据集可以在如下地址下载。\n该数据集的名称解释如下：\nDesign#\t：Star-CCM+中的设计编号 \u0026ldquo;Name\u0026rdquo;\t：Star-CCM+中的DM单次计算顺序 \u0026ldquo;T_d\u0026rdquo;\t：空气的进出口温差 \u0026ldquo;T_inlet (C)\u0026rdquo;\t：空气进口温度 \u0026ldquo;T_outlet (C)\u0026rdquo;\t：空气出口温度 \u0026ldquo;energy_out\u0026rdquo;\t：根据空气进出口温差计算的空气通过对流带走的热量 \u0026ldquo;heatT (C)\u0026rdquo;\t：heat的平均温度 \u0026ldquo;mass (kg/s)\u0026rdquo;\t：空气的质量流量 \u0026ldquo;Performance\u0026rdquo;\t：DM对单次设计的性能评价，我们只是通过Sweep功能来收集数据，该项没有意义。 \u0026ldquo;H (mm)\u0026rdquo;\t：plate的宽 \u0026ldquo;H2 (mm)\u0026rdquo;\t：heat的宽 \u0026ldquo;L (mm)\u0026rdquo;\t：plate的长 \u0026ldquo;L2 (mm)\u0026rdquo;\t：heat的长 \u0026ldquo;W (mm)\u0026rdquo;\t：plate的厚 \u0026ldquo;Wair (mm)\u0026rdquo;\t：为模型中air的高度，设置为常量 \u0026ldquo;heat\u0026rdquo;\t：heat的发热量 \u0026ldquo;v\u0026rdquo;：空气的进口速度 机器学习 将数据集导入notebook并且做一些处理，选取我们主要的输入和输出：","title":"CFD与机器学习（1）一个简单的模型"},{"content":"Introduciton In the new version of Star-CCM+, a very useful feature called Design Manager has been added. It is mainly used for optimization and parametric sweep simulations.\nApplications The development and optimization of most engineering products involve systematic analysis of the parameters affecting their performance. Product performance is related to its primary operational characteristics, which typically refer to measurable quantities such as weight, dimensions, or resistance. Identifying key parameters and adjusting their values to improve product performance usually requires numerous design iterations.\nEach iteration either improves or worsens the product to some extent. However, every design provides valuable information on how to seek the ultimate goal among the infinite potential designs. This information also reflects the operating mechanism of the entire model. While each piece of information might be like a \u0026ldquo;blind man touching an elephant,\u0026rdquo; if enough information can be collected and machine learning methods are used, then although each blind person sees only a part of the elephant, from the perspective of all the information, this group of blind people can truly \u0026ldquo;see\u0026rdquo; what the elephant looks like.\nThe issue In the current version of Star-CCM+, when performing calculations using the sweep mode, if a single design manager is used to sweep a large number of cases, the overall computational efficiency decreases.\nFor example, consider the following sweep case with a total of 12 variables, each taking 3 values for the sweep. The overall computational load is 3^12 = 531,441, meaning over 531,000 calculations need to be completed! Assuming we have the time and hardware to run these, once this sweeeeeep starts, we observe a sharp decline in computational efficiency. This can be seen from the CPU usage, which indicates that the CPUs are not fully utilized.\nPossible reason: It could be due to Star-CCM+ itself. For instance, if fewer variables are chosen, such as running calculations for only 7 variables, the overall computation load is 3^7 = 2,187. In such cases, CPU utilization remains consistently high throughout, leading to significantly improved computational efficiency.\nCountermeasure Based on the earlier description, the strategy would be to divide a large computation set into several smaller sets. In this case, Java programming can be utilized. Use a Java program to iterate over several variables, while iterating over the remaining variables in Star-CCM+. Ensure that the overall computation load in the Design Manager does not exceed 3000. After each computation set is completed, save its result file as a separate CSV file, which can later be merged with the data files.\njava file ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i \u0026lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j \u0026lt; heat.length; j++) { ... mdxStudyParameter_1.getBaselineQuantity().setValueAndUnits(heat[j], units_0); for (int k = 0; k \u0026lt; v.length; k++) { ... mdxStudyParameter_2.getBaselineQuantity().setValueAndUnits(v[k], units_0); ... Conclusion Due to Star-CCM+\u0026rsquo;s support for Java, integrating Java code with the Design Manager can significantly enhance computational efficiency. This integration allows for optimal utilization of time and hardware resources, while also generating extensive datasets for further research purposes.\n","permalink":"https://www.xuechao.net/posts/use-star-ccm-design-manager-for-parametric-sweep/","summary":"Introduciton In the new version of Star-CCM+, a very useful feature called Design Manager has been added. It is mainly used for optimization and parametric sweep simulations.\nApplications The development and optimization of most engineering products involve systematic analysis of the parameters affecting their performance. Product performance is related to its primary operational characteristics, which typically refer to measurable quantities such as weight, dimensions, or resistance. Identifying key parameters and adjusting their values to improve product performance usually requires numerous design iterations.","title":"Use Star-CCM+ Design Manager for parametric sweep simulations"},{"content":"介绍 在Star-CCM+的新的版本中增加了一个非常好用的功能————Design Manager。主要用来进行优化计算和扫描计算。\n应用场景 大多数工程产品的开发和优化的方法是对影响其产品性能的参数进行系统性的分析。产品的性能受其主要运行状态特性相关，通常指的是可测量的量，如重量、尺寸或阻力。识别关键参数并调整其数值以改进产品性能的过程通常需要大量的设计迭代。\n每次迭代都会使产品在某种程度上变得更好或更糟。但是，每个设计都提供了关于如何在无限多的潜在设计中寻找最终目标的宝贵信息。这些信息还是反映了整个模型的运行机理，有可能每个信息只是一个人的“盲人摸象”，但是如果能够收集到足够多的信息，使用机器学习的方法，虽然每个盲人看到的只是大象的一部分，从所有信息的角度来看，我们这一群盲人真正的能“看到”这个大象到底长得是什么样子。\n研究发现 在现有的Star-CCM+版本计算中，通过sweep模式进行计算，如果单个design manager来sweep的案例较多的话，整体的计算效率会降低。\n比如，如下一个sweep案例，一共12个变量，每个变量取3个值进行扫描，整体计算量为：3^12=531441,整体53万个计算要跑完！首先假定咱们也有时间和硬件来运行，当这个sweeeeeep跑上之后，发现计算效率急剧下降，通过cpu的占用可以看出来几乎没有跑满。\n可能的原因：有可能是Star-CCM+本身的原因。因为，如果选择更少的变量，比如只跑其中7个变量，那么整体运算量为：3^7=2187,这个时候从始至终cpu的占用可以非常高，整体计算效率可以很高。\n对策 根据前面的描述，那么我们只能将一个大的运算集分成若干个小的运算集进行，这个时候我们可以使用java编程。利用java程序，将其中若干个变量在java程序中进行迭代，剩下的变量在Star-CCM+中迭代。保证在Design manager中整体计算量不要超过3000，每个运算集完成后，其结果文件保存为单独的csv文件，后面将数据文件合并即可。\n参考java文件 ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i \u0026lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j \u0026lt; heat.length; j++) { ... mdxStudyParameter_1.getBaselineQuantity().setValueAndUnits(heat[j], units_0); for (int k = 0; k \u0026lt; v.length; k++) { ... mdxStudyParameter_2.getBaselineQuantity().setValueAndUnits(v[k], units_0); ... 结论 由于Star-CCCM+对于java语言的支持，可以将java代码与Design Manager结合起来，最终既可以提高计算效率，充分利用时间和硬件资源，并且还可以得到非常多的数据集，用于接下来的研究。\n","permalink":"https://www.xuechao.net/posts/using-starccmp-design-manager-to-perform-sweep/","summary":"介绍 在Star-CCM+的新的版本中增加了一个非常好用的功能————Design Manager。主要用来进行优化计算和扫描计算。\n应用场景 大多数工程产品的开发和优化的方法是对影响其产品性能的参数进行系统性的分析。产品的性能受其主要运行状态特性相关，通常指的是可测量的量，如重量、尺寸或阻力。识别关键参数并调整其数值以改进产品性能的过程通常需要大量的设计迭代。\n每次迭代都会使产品在某种程度上变得更好或更糟。但是，每个设计都提供了关于如何在无限多的潜在设计中寻找最终目标的宝贵信息。这些信息还是反映了整个模型的运行机理，有可能每个信息只是一个人的“盲人摸象”，但是如果能够收集到足够多的信息，使用机器学习的方法，虽然每个盲人看到的只是大象的一部分，从所有信息的角度来看，我们这一群盲人真正的能“看到”这个大象到底长得是什么样子。\n研究发现 在现有的Star-CCM+版本计算中，通过sweep模式进行计算，如果单个design manager来sweep的案例较多的话，整体的计算效率会降低。\n比如，如下一个sweep案例，一共12个变量，每个变量取3个值进行扫描，整体计算量为：3^12=531441,整体53万个计算要跑完！首先假定咱们也有时间和硬件来运行，当这个sweeeeeep跑上之后，发现计算效率急剧下降，通过cpu的占用可以看出来几乎没有跑满。\n可能的原因：有可能是Star-CCM+本身的原因。因为，如果选择更少的变量，比如只跑其中7个变量，那么整体运算量为：3^7=2187,这个时候从始至终cpu的占用可以非常高，整体计算效率可以很高。\n对策 根据前面的描述，那么我们只能将一个大的运算集分成若干个小的运算集进行，这个时候我们可以使用java编程。利用java程序，将其中若干个变量在java程序中进行迭代，剩下的变量在Star-CCM+中迭代。保证在Design manager中整体计算量不要超过3000，每个运算集完成后，其结果文件保存为单独的csv文件，后面将数据文件合并即可。\n参考java文件 ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i \u0026lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j \u0026lt; heat.","title":"利用Star-CCM+的Design Manager来进行扫描计算"}]