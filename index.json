[{"content":"TEsT ","permalink":"https://www.xuechao.net/posts/20240709/","summary":"TEsT ","title":"20240709"},{"content":"","permalink":"https://www.xuechao.net/20240709/","summary":"","title":"20240709"},{"content":" This is a Blog for CFD, Simulation and Machine Learing .\nEmail: xuechao@gmail.com\n","permalink":"https://www.xuechao.net/about/","summary":"This is a Blog for CFD, Simulation and Machine Learing .\nEmail: xuechao@gmail.com","title":"About"},{"content":"摘要 本项目初步进行\n模型 模型如下图所示：\n数据集 机器学习 结论 ","permalink":"https://www.xuechao.net/posts/cfd-and-machine-learning-part-1-a-simple-model/","summary":"摘要 本项目初步进行\n模型 模型如下图所示：\n数据集 机器学习 结论 ","title":"CFD与机器学习（1）一个简单的模型"},{"content":"Introduciton In the new version of Star-CCM+, a very useful feature called Design Manager has been added. It is mainly used for optimization and parametric sweep simulations.\nApplications The development and optimization of most engineering products involve systematic analysis of the parameters affecting their performance. Product performance is related to its primary operational characteristics, which typically refer to measurable quantities such as weight, dimensions, or resistance. Identifying key parameters and adjusting their values to improve product performance usually requires numerous design iterations.\nEach iteration either improves or worsens the product to some extent. However, every design provides valuable information on how to seek the ultimate goal among the infinite potential designs. This information also reflects the operating mechanism of the entire model. While each piece of information might be like a \u0026ldquo;blind man touching an elephant,\u0026rdquo; if enough information can be collected and machine learning methods are used, then although each blind person sees only a part of the elephant, from the perspective of all the information, this group of blind people can truly \u0026ldquo;see\u0026rdquo; what the elephant looks like.\nThe issue In the current version of Star-CCM+, when performing calculations using the sweep mode, if a single design manager is used to sweep a large number of cases, the overall computational efficiency decreases.\nFor example, consider the following sweep case with a total of 12 variables, each taking 3 values for the sweep. The overall computational load is 3^12 = 531,441, meaning over 531,000 calculations need to be completed! Assuming we have the time and hardware to run these, once this sweeeeeep starts, we observe a sharp decline in computational efficiency. This can be seen from the CPU usage, which indicates that the CPUs are not fully utilized.\nPossible reason: It could be due to Star-CCM+ itself. For instance, if fewer variables are chosen, such as running calculations for only 7 variables, the overall computation load is 3^7 = 2,187. In such cases, CPU utilization remains consistently high throughout, leading to significantly improved computational efficiency.\nCountermeasure Based on the earlier description, the strategy would be to divide a large computation set into several smaller sets. In this case, Java programming can be utilized. Use a Java program to iterate over several variables, while iterating over the remaining variables in Star-CCM+. Ensure that the overall computation load in the Design Manager does not exceed 3000. After each computation set is completed, save its result file as a separate CSV file, which can later be merged with the data files.\njava file ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i \u0026lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j \u0026lt; heat.length; j++) { ... mdxStudyParameter_1.getBaselineQuantity().setValueAndUnits(heat[j], units_0); for (int k = 0; k \u0026lt; v.length; k++) { ... mdxStudyParameter_2.getBaselineQuantity().setValueAndUnits(v[k], units_0); ... Conclusion Due to Star-CCM+\u0026rsquo;s support for Java, integrating Java code with the Design Manager can significantly enhance computational efficiency. This integration allows for optimal utilization of time and hardware resources, while also generating extensive datasets for further research purposes.\n","permalink":"https://www.xuechao.net/posts/use-star-ccm-design-manager-for-parametric-sweep/","summary":"Introduciton In the new version of Star-CCM+, a very useful feature called Design Manager has been added. It is mainly used for optimization and parametric sweep simulations.\nApplications The development and optimization of most engineering products involve systematic analysis of the parameters affecting their performance. Product performance is related to its primary operational characteristics, which typically refer to measurable quantities such as weight, dimensions, or resistance. Identifying key parameters and adjusting their values to improve product performance usually requires numerous design iterations.","title":"Use Star-CCM+ Design Manager for parametric sweep simulations"},{"content":"介绍 在Star-CCM+的新的版本中增加了一个非常好用的功能————Design Manager。主要用来进行优化计算和扫描计算。\n应用场景 大多数工程产品的开发和优化的方法是对影响其产品性能的参数进行系统性的分析。产品的性能受其主要运行状态特性相关，通常指的是可测量的量，如重量、尺寸或阻力。识别关键参数并调整其数值以改进产品性能的过程通常需要大量的设计迭代。\n每次迭代都会使产品在某种程度上变得更好或更糟。但是，每个设计都提供了关于如何在无限多的潜在设计中寻找最终目标的宝贵信息。这些信息还是反映了整个模型的运行机理，有可能每个信息只是一个人的“盲人摸象”，但是如果能够收集到足够多的信息，使用机器学习的方法，虽然每个盲人看到的只是大象的一部分，从所有信息的角度来看，我们这一群盲人真正的能“看到”这个大象到底长得是什么样子。\n研究发现 在现有的Star-CCM+版本计算中，通过sweep模式进行计算，如果单个design manager来sweep的案例较多的话，整体的计算效率会降低。\n比如，如下一个sweep案例，一共12个变量，每个变量取3个值进行扫描，整体计算量为：3^12=531441,整体53万个计算要跑完！首先假定咱们也有时间和硬件来运行，当这个sweeeeeep跑上之后，发现计算效率急剧下降，通过cpu的占用可以看出来几乎没有跑满。\n可能的原因：有可能是Star-CCM+本身的原因。因为，如果选择更少的变量，比如只跑其中7个变量，那么整体运算量为：3^7=2187,这个时候从始至终cpu的占用可以非常高，整体计算效率可以很高。\n对策 根据前面的描述，那么我们只能将一个大的运算集分成若干个小的运算集进行，这个时候我们可以使用java编程。利用java程序，将其中若干个变量在java程序中进行迭代，剩下的变量在Star-CCM+中迭代。保证在Design manager中整体计算量不要超过3000，每个运算集完成后，其结果文件保存为单独的csv文件，后面将数据文件合并即可。\n参考java文件 ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i \u0026lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j \u0026lt; heat.length; j++) { ... mdxStudyParameter_1.getBaselineQuantity().setValueAndUnits(heat[j], units_0); for (int k = 0; k \u0026lt; v.length; k++) { ... mdxStudyParameter_2.getBaselineQuantity().setValueAndUnits(v[k], units_0); ... 结论 由于Star-CCCM+对于java语言的支持，可以将java代码与Design Manager结合起来，最终既可以提高计算效率，充分利用时间和硬件资源，并且还可以得到非常多的数据集，用于接下来的研究。\n","permalink":"https://www.xuechao.net/posts/using-starccmp-design-manager-to-perform-sweep/","summary":"介绍 在Star-CCM+的新的版本中增加了一个非常好用的功能————Design Manager。主要用来进行优化计算和扫描计算。\n应用场景 大多数工程产品的开发和优化的方法是对影响其产品性能的参数进行系统性的分析。产品的性能受其主要运行状态特性相关，通常指的是可测量的量，如重量、尺寸或阻力。识别关键参数并调整其数值以改进产品性能的过程通常需要大量的设计迭代。\n每次迭代都会使产品在某种程度上变得更好或更糟。但是，每个设计都提供了关于如何在无限多的潜在设计中寻找最终目标的宝贵信息。这些信息还是反映了整个模型的运行机理，有可能每个信息只是一个人的“盲人摸象”，但是如果能够收集到足够多的信息，使用机器学习的方法，虽然每个盲人看到的只是大象的一部分，从所有信息的角度来看，我们这一群盲人真正的能“看到”这个大象到底长得是什么样子。\n研究发现 在现有的Star-CCM+版本计算中，通过sweep模式进行计算，如果单个design manager来sweep的案例较多的话，整体的计算效率会降低。\n比如，如下一个sweep案例，一共12个变量，每个变量取3个值进行扫描，整体计算量为：3^12=531441,整体53万个计算要跑完！首先假定咱们也有时间和硬件来运行，当这个sweeeeeep跑上之后，发现计算效率急剧下降，通过cpu的占用可以看出来几乎没有跑满。\n可能的原因：有可能是Star-CCM+本身的原因。因为，如果选择更少的变量，比如只跑其中7个变量，那么整体运算量为：3^7=2187,这个时候从始至终cpu的占用可以非常高，整体计算效率可以很高。\n对策 根据前面的描述，那么我们只能将一个大的运算集分成若干个小的运算集进行，这个时候我们可以使用java编程。利用java程序，将其中若干个变量在java程序中进行迭代，剩下的变量在Star-CCM+中迭代。保证在Design manager中整体计算量不要超过3000，每个运算集完成后，其结果文件保存为单独的csv文件，后面将数据文件合并即可。\n参考java文件 ... public class java1 extends MdxMacro { double[] W = { 20.0, 25.0, 30.0}; double[] heat = { 10.0,15.0, 20.0 }; double[] v = { 10.0,15.0, 20.0 }; ... } private void execute0() { ... for (int i = 0; i \u0026lt; W.length; i++) { ... mdxStudyParameter_0.getBaselineQuantity().setValueAndUnits(W[i], units_0); for (int j = 0; j \u0026lt; heat.","title":"利用Star-CCM+的Design Manager来进行扫描计算"}]